// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define EXPAND(x, y)
#define TEMPLATES
#define SERVICES
#define VCPP(_type) _type::_type(const float& x, const float& y) { this->x = x; this->y = y; }_type::_type(const float& x, const float& y, const float& z) { this->x = x; this->y = y; this->z = z; }_type _type::operator* (const float& scale) const { return _type(scale * x, scale * y); }_type _type::operator/ (const float& scale) const { return _type(x / scale, y / scale); }_type _type::operator* (const VBase& scale) const { return _type(scale.x * x, scale.y * y); }_type _type::operator/ (const VBase& scale) const { return _type(x / scale.x, y / scale.y); }_type _type::operator+ (const _type& other) const { return _type(x + other.x, y + other.y); }_type _type::operator- (const _type& other) const { return _type(x - other.x, y - other.y); }bool _type::operator==(const _type& other) const { return x == other.x && y == other.y && z == other.z; }bool _type::operator!=(const _type& other) const { return x != other.x || y != other.y || z != other.z; }_type _type::operator+=(const _type& other) { x += other.x; y += other.y; z += other.z; return *this; }_type _type::operator-=(const _type& other) { x -= other.x; y -= other.y; z -= other.z; return *this; }_type _type::operator*=(const _type& other) { x *= other.x; y *= other.y; z *= other.z; return *this; }_type _type::operator/=(const _type& other) { x /= other.x; y /= other.y; z /= other.z; return *this; }_type _type::operator*=(const float& scale) { x *= scale; y *= scale; z *= scale; return *this; }_type _type::operator/=(const float& scale) { x /= scale; y /= scale; z /= scale; return *this; }
#define PARAMETERS
#define PARAMETERS function<bool(void)> f
#define EVENT_CLASS(_type, _parents, _members, _parameters) class _type _parents {private: static EventEmitter<_type>& getEmitter() { static EventEmitter<_type> emitter; return emitter; }public: _members _type(_parameters); static void subscribe(EventObserver<_type>* obv); static void unsubscribe(EventObserver<_type>* obv); void emit();};
